plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    // ✅ JPA & Spring Data 관련 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT (io.jsonwebtoken:jjwt)
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // Spring Boot Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Password 암호화 (BCrypt)
    implementation 'org.springframework.security:spring-security-crypto:5.6.1'

    // ✅ Kafka 관련 라이브러리
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-streams'

    // ✅ Database 관련 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql' // PostgreSQL
    implementation 'com.h2database:h2' // H2 DB (테스트용)

    // ✅ QueryDSL 최신 버전 (5.0.0, Jakarta 버전)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'

    // ✅ QueryDSL 자동 생성 클래스 관련 설정
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.0'

    // ✅ Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // ✅ 테스트 관련 라이브러리
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // .evn 파일 로드
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    // Model Mapper
    implementation 'org.modelmapper:modelmapper:3.1.1'

    // 개발 중 자동 리로드 지원
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.postgresql:postgresql:42.6.0'
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/sources/annotationProcessor/java/main")
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/sources/annotationProcessor/java/main"
        }
    }
}

tasks.withType(JavaExec).configureEach {
    environment("DOTENV_PATH", file(".env").absolutePath)  // ✅ .env 경로 지정
}
tasks.withType(Test).configureEach {
    enabled = false
}
tasks.named('bootJar') {
    archiveFileName = 'app.jar'
    mainClass = 'com.example.ezpay.EzPayApplication' // ✅ 실제 Application 클래스 경로로 수정
}
