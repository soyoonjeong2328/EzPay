version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    container_name: backend
    ports:
      - "8080:8080"
    env_file:
      - backend/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - my_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    container_name: frontend
    ports:
      - "3000:3000"
    stdin_open: true
    tty: true
    networks:
      - my_network
    depends_on:
      - backend

  postgres:
    image: postgres:12
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${SPRING_DATASOURCE_DB}
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${SPRING_DATASOURCE_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my_network

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - my_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - my_network

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: always
    user: root
    ports:
      - "8082:8080"
      - "50000:50000"
    volumes:
      - jenkins-data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - my_network

volumes:
  postgres-data:
  kafka-data:
  jenkins-data:

networks:
  my_network:
    driver: bridge